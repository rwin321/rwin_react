{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.js","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogsItem","path","id","className","s","dialog","active","logoImg","src","alt","name","Message","messagesContent","message","maxLength100","maxLength","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","placeholder","sendMessageBtn","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,gBAAkB,iCAAiC,SAAW,0BAA0B,eAAiB,kC,uICG5SC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAIC,KAAKC,MAAMN,OACR,kBAACG,EAAcE,KAAKC,OADG,kBAAC,IAAD,CAAUC,GAAI,eAJT,GAEXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,+FCD9DM,EAZK,SAACJ,GACjB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAAST,GAAII,GACb,8BAAM,yBAAKE,UAAWC,IAAEG,QAASC,IAAI,qEAAqEC,IAAI,qBAC9G,8BAAOb,EAAMc,SCGVC,EATC,SAACf,GAEb,OACI,yBAAKO,UAAWC,IAAEQ,iBACd,yBAAKT,UAAWC,IAAES,SAAUjB,EAAMiB,W,iCCoC1CC,EAAeC,YAAU,KAavBC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAXL,SAACrB,GACpB,OAAO,0BAAMuB,SAAUvB,EAAMwB,cACzB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAUV,EAAcJ,KAAM,iBAAkBe,YAAa,uBAE7F,6BACI,4BAAQtB,UAAWC,IAAEsB,gBAArB,aAQGC,EApDC,SAAC/B,GAEb,IAAIP,EAAQO,EAAMgC,YAEdC,EAAkBxC,EAAMyC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAatB,KAAMsB,EAAEtB,KAAMR,GAAI8B,EAAE9B,QAE1E+B,EAAmB5C,EAAM6C,SAASH,KAAI,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASX,GAAIiC,EAAEjC,QAiBlF,OACI,yBAAKC,UAAWC,IAAE0B,SACd,yBAAK3B,UAAWC,IAAEgC,cACbP,GAEL,yBAAK1B,UAAWC,IAAE8B,UACbD,GAEL,kBAACjB,EAAD,CAAqBG,SAZT,SAACkB,GACjBzC,EAAM0C,YAAYD,EAAOE,qB,wBCoBlBC,sBACXzC,aAhBkB,SAACV,GACnB,MAAO,CACHuC,YAAavC,EAAMuC,eAcE,CAACU,kBAC1B9C,IAFWgD,CAGbb","file":"static/js/4.6535ea6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1JLBa\",\"dialogsItems\":\"Dialogs_dialogsItems__84ZcQ\",\"dialog\":\"Dialogs_dialog__T3J_V\",\"active\":\"Dialogs_active__3XSRk\",\"logoImg\":\"Dialogs_logoImg__3O2cv\",\"messagesContent\":\"Dialogs_messagesContent__3P9w5\",\"messages\":\"Dialogs_messages__1zuG8\",\"sendMessageBtn\":\"Dialogs_sendMessageBtn__37PLd\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogsItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>\r\n            <span><img className={s.logoImg} src=\"https://miro.medium.com/fit/c/256/256/2*xhm2q3S8_kRKnrHumo3Rvg.png\" alt=\"image broken :(\"/></span>\r\n            <span>{props.name}</span>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    return (\r\n        <div className={s.messagesContent}>\r\n            <div className={s.message}>{props.message}</div>\r\n        </div>\r\n)\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLength} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogsItem name={d.name} id={d.id}/>);\r\n\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id}/>);\r\n    \r\n\r\n    // let newMessageElement = React.createRef();\r\n/*    let onMessageClick = () => {\r\n        props.sendMessage();\r\n    }\r\n    let onMessageChange = (e) => {\r\n        let newText = e.target.value;\r\n        props.updateNewMessageText(newText);\r\n    }\r\n    */\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet maxLength100 = maxLength(100)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} validate={maxLength100} name={'newMessageBody'} placeholder={'Enter new message'} />\r\n        </div>\r\n        <div>\r\n            <button className={s.sendMessageBtn}>Send</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs","import React from 'react'\r\n\r\nimport {sendMessage} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n/*const DialogsContainer = () => {\r\n\r\n\r\n    return <StoreContext.Consumer>\r\n        { store => {\r\n            let state = store.getState().dialogsPage;\r\n\r\n            let onMessageClick = () => {\r\n               store.dispatch(sendMessageCreator())\r\n            }\r\n            let onMessageChange = (newText) => {\r\n               store.dispatch(updateNewMessageTextCreator(newText))\r\n            }\r\n\r\n            return <Dialogs\r\n                updateNewMessageText={onMessageChange}\r\n                sendMessageCreator={onMessageClick}\r\n                dialogsPage={store.getState().dialogsPage}/>\r\n        }\r\n    }\r\n    </StoreContext.Consumer>\r\n}*/\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n//Previous version:\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessage(newMessageBody))\r\n        }\r\n    }\r\n}*/\r\n//So now we don't use mapDispatchToProps, we use instead just name of our AC in connect func, which automatically making same\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {sendMessage}),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n/*\r\n//Previous version:\r\nlet AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default DialogsContainer\r\n*/\r\n"],"sourceRoot":""}